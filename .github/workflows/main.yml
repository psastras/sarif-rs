on:
  push:
    branches:
      - main
  pull_request:

# ignore gh-pages
name: main

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: cachix/install-nix-action@v13
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: llvm-tools-preview,rustfmt,clippy
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Install cargo-llvm-cov
        run:
          curl -LsSf
          https://github.com/taiki-e/cargo-llvm-cov/releases/download/v0.1.0-alpha.4/cargo-llvm-cov-x86_64-unknown-linux-gnu.tar.gz
          | tar xzf - -C ~/.cargo/bin
      - uses: actions-rs/cargo@v1
        with:
          command: llvm-cov
          args: --all-features --workspace --lcov --output-path lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt,clippy
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  docs:
    name: Docs
    needs: [check, test, fmt, clippy]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install and Run Zola
        run: |
          sudo snap install --edge zola
          zola build
        working-directory: docs
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/public
          force_orphan: true

  publish:
    name: Publish
    needs: [check, test, fmt, clippy]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
      # hack: sometimes crates.io takes time to detect the newly published
      # crate dependency causing other crates to fail, so, try 3 times
      - uses: katyo/publish-crates@v1
        continue-on-error: true
        with:
          registry-token: ${{ secrets.CRATES_IO_TOKEN }}
          args: --no-verify
      - uses: katyo/publish-crates@v1
        continue-on-error: true
        with:
          registry-token: ${{ secrets.CRATES_IO_TOKEN }}
          args: --no-verify
      - uses: katyo/publish-crates@v1
        with:
          registry-token: ${{ secrets.CRATES_IO_TOKEN }}
          args: --no-verify

  gh-release:
    name: Github Release
    needs: [check, test, fmt, clippy]
    if: ${{ github.ref == 'refs/heads/main' }}
    strategy:
      matrix:
        runs-on: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --bins
      - name: target triple
        id: target-triple
        run: |
          TARGET_TRIPLE=$(rustc --version --verbose | grep host | awk '{print $2}')
          echo ::set-output name=target_triple::$TARGET_TRIPLE
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag:
            "latest-${{ steps.target-triple.outputs.target_triple }}"
          prerelease: true
          title: "latest-${{ steps.target-triple.outputs.target_triple }}"
          files: |
            ./target/release/clippy-sarif
            ./target/release/hadolint-sarif
            ./target/release/shellcheck-sarif
            ./target/release/sarif-fmt
